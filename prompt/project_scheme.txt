Pelajari kode NextJS TypeScript ini:

# .env.local
MONGODB_URI=mongodb+srv://yogaone:WlzKwPCWmqU5oGIr@cluster0.jhkyh.mongodb.net/agritrack?retryWrites=true&w=majority&appName=Cluster0
JWT_SECRET=askjhdkjsahdkasjhdkjashkjshdisu1826321736126387kjashdkjashdkjsah

// lib/auth.ts
import { NextApiRequest, NextApiResponse } from 'next';
import jwt from 'jsonwebtoken';
import cors from '@/middlware/cors';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

export interface AuthenticatedRequest extends NextApiRequest {
  user?: {
    userId: string;
    phone: string;
    role: string;
  };
}

export const verifyToken = async (req: AuthenticatedRequest, res: NextApiResponse): Promise<boolean> => {
  // Apply CORS first
  await cors(req, res);
  
  return new Promise((resolve) => {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      res.status(401).json({ error: 'Token tidak ditemukan' });
      return resolve(false);
    }

    const token = authHeader.substring(7);

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as any;
      req.user = decoded;
      resolve(true);
    } catch (error) {
      res.status(401).json({ error: 'Token tidak valid' });
      resolve(false);
    }
  });
};

// lib/middleware.ts
import { NextApiRequest, NextApiResponse } from 'next';

export default function initMiddleware(middleware: any) {
  return (req: NextApiRequest, res: NextApiResponse) =>
    new Promise((resolve, reject) => {
      middleware(req, res, (result: any) => {
        if (result instanceof Error) {
          return reject(result);
        }
        return resolve(result);
      });
    });
}

// lib/mongodb.js
import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error("Harap setel MONGODB_URI di .env.local");
}

const connectionToDatabase = async (): Promise<void> => {
  if (mongoose.connection.readyState >= 1) return;

  try {
    await mongoose.connect(MONGODB_URI);
    console.log("MongoDB Connected");
  } catch (error) {
    console.error("MongoDB Connection Error:", error);
  }
};

export default connectionToDatabase;

// middleware/cors.js
import Cors from "cors";
import initMiddleware from "@/lib/middleware";

const cors = initMiddleware(
  Cors({
    origin: process.env.NODE_ENV === 'production' 
      ? ['https://your-frontend-domain.com'] // Ganti dengan domain frontend Anda
      : "*", // Allow all origins in development
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true,
  }),
);

export default cors;